// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PeopleGen.Dal;

namespace PeopleGen.Dal.Migrations
{
    [DbContext(typeof(PeopleDbContext))]
    [Migration("20211027194609_moreModel")]
    partial class moreModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BusinessInventory", b =>
                {
                    b.Property<int>("BusinessId")
                        .HasColumnType("integer");

                    b.Property<int>("InventoryId")
                        .HasColumnType("integer");

                    b.HasKey("BusinessId", "InventoryId");

                    b.HasIndex("InventoryId");

                    b.ToTable("BusinessInventory");
                });

            modelBuilder.Entity("PeopleGen.Core.Business", b =>
                {
                    b.Property<int>("BusinessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("BusinessOwnerPersonId")
                        .HasColumnType("integer");

                    b.Property<string>("BusinessType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumOfEmployees")
                        .HasColumnType("integer");

                    b.HasKey("BusinessId");

                    b.HasIndex("BusinessOwnerPersonId");

                    b.ToTable("Business");
                });

            modelBuilder.Entity("PeopleGen.Core.Civilization", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ideology")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeOfRule")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CityId");

                    b.ToTable("Civilization");
                });

            modelBuilder.Entity("PeopleGen.Core.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("InventoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InventoryType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCursed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMagical")
                        .HasColumnType("boolean");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("moneyType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("InventoryId");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("PeopleGen.Core.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Alignment")
                        .HasColumnType("text");

                    b.Property<int>("Charisma")
                        .HasColumnType("integer");

                    b.Property<int?>("CivilizationCityId")
                        .HasColumnType("integer");

                    b.Property<int>("Constitution")
                        .HasColumnType("integer");

                    b.Property<int>("Dexterity")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Intelligence")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("integer");

                    b.Property<int>("Strength")
                        .HasColumnType("integer");

                    b.Property<int>("Wisdom")
                        .HasColumnType("integer");

                    b.HasKey("PersonId");

                    b.HasIndex("CivilizationCityId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            Age = 46,
                            Alignment = "Neutral Neutral",
                            Charisma = 18,
                            Constitution = 10,
                            Dexterity = 14,
                            FirstName = "Talice",
                            Gender = "Female",
                            Intelligence = 15,
                            LastName = "Nenna",
                            SpeciesId = 1,
                            Strength = 10,
                            Wisdom = 18
                        },
                        new
                        {
                            PersonId = 2,
                            Age = 20,
                            Alignment = "Chaotic Neutral",
                            Charisma = 12,
                            Constitution = 116,
                            Dexterity = 13,
                            FirstName = "Narook",
                            Gender = "Male",
                            Intelligence = 11,
                            LastName = "Vunakian",
                            SpeciesId = 2,
                            Strength = 20,
                            Wisdom = 11
                        },
                        new
                        {
                            PersonId = 3,
                            Age = 30,
                            Alignment = "Chaotic Neutral",
                            Charisma = 13,
                            Constitution = 19,
                            Dexterity = 19,
                            FirstName = "Denede",
                            Gender = "Male",
                            Intelligence = 18,
                            LastName = "FireStarter",
                            SpeciesId = 1,
                            Strength = 10,
                            Wisdom = 15
                        });
                });

            modelBuilder.Entity("PeopleGen.Core.Species", b =>
                {
                    b.Property<int>("SpeciesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("SpeciesName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SpeciesId");

                    b.ToTable("Species");

                    b.HasData(
                        new
                        {
                            SpeciesId = 1,
                            SpeciesName = "Elf"
                        },
                        new
                        {
                            SpeciesId = 2,
                            SpeciesName = "Human"
                        },
                        new
                        {
                            SpeciesId = 3,
                            SpeciesName = "Orc"
                        });
                });

            modelBuilder.Entity("BusinessInventory", b =>
                {
                    b.HasOne("PeopleGen.Core.Business", null)
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeopleGen.Core.Inventory", null)
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PeopleGen.Core.Business", b =>
                {
                    b.HasOne("PeopleGen.Core.Person", "BusinessOwner")
                        .WithMany()
                        .HasForeignKey("BusinessOwnerPersonId");

                    b.Navigation("BusinessOwner");
                });

            modelBuilder.Entity("PeopleGen.Core.Person", b =>
                {
                    b.HasOne("PeopleGen.Core.Civilization", null)
                        .WithMany("persons")
                        .HasForeignKey("CivilizationCityId");

                    b.HasOne("PeopleGen.Core.Species", "Species")
                        .WithMany("persons")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Species");
                });

            modelBuilder.Entity("PeopleGen.Core.Civilization", b =>
                {
                    b.Navigation("persons");
                });

            modelBuilder.Entity("PeopleGen.Core.Species", b =>
                {
                    b.Navigation("persons");
                });
#pragma warning restore 612, 618
        }
    }
}
